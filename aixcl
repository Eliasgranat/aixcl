#!/usr/bin/env bash

set -e  # Exit on error
set -u  # Treat unset variables as an error
set -o pipefail  # Catch errors in pipelines

# Load environment variables from .env file
if [ -f .env ]; then
    export $(cat .env | grep -v '^#' | xargs)
fi

# Allow custom Docker Compose file via environment variable
COMPOSE_FILE=${COMPOSE_FILE:-docker-compose.yml}
COMPOSE_CMD="docker-compose -f $COMPOSE_FILE"
CONTAINER_NAME="open-webui"

function start() {
    echo "Starting Docker Compose deployment..."
    
    # Check if services are already running
    if docker ps --format "{{.Names}}" | grep -q "$CONTAINER_NAME"; then
        echo "Services are already running. Use 'stop' first if you want to restart."
        exit 1
    fi
    
    # Pull latest images
    echo "Pulling latest images..."
    $COMPOSE_CMD pull
    
    # Start services
    echo "Starting services..."
    $COMPOSE_CMD up -d
    
    # Wait for services to be ready
    echo "Waiting for services to be ready..."
    for i in {1..30}; do
        if curl -s -o /dev/null -w "%{http_code}" http://localhost:11434/api/version 2>/dev/null | grep -q "200" && \
           curl -s -o /dev/null -w "%{http_code}" http://localhost:8080 2>/dev/null | grep -q "200" && \
           docker exec postgres pg_isready -U webui >/dev/null 2>&1; then
            echo "All services are up and running!"
            status
            return 0
        fi
        echo "Waiting for services to become available... ($i/30)"
        sleep 2
    done
    
    echo "Error: Services did not start properly within timeout period"
    status
    exit 1
}

function stop() {
    echo "Stopping Docker Compose deployment..."
    
    # Check if any of our services are running
    if ! docker ps --format "{{.Names}}" | grep -qE "$CONTAINER_NAME|ollama|postgres|pgadmin|watchtower"; then
        echo "Services are not running."
        return 0
    fi
    
    # Stop services gracefully
    echo "Stopping services gracefully..."
    $COMPOSE_CMD down --remove-orphans
    
    # Wait for containers to stop
    echo "Waiting for containers to stop..."
    for i in {1..15}; do
        if ! docker ps --format "{{.Names}}" | grep -qE "$CONTAINER_NAME|ollama|postgres|pgadmin|watchtower"; then
            echo "All services stopped successfully."
            return 0
        fi
        echo "Waiting for services to stop... ($i/15)"
        sleep 2
    done
    
    # Force stop if graceful shutdown fails
    echo "Warning: Services did not stop gracefully. Forcing shutdown..."
    $COMPOSE_CMD down --remove-orphans -v
    docker ps -q | xargs -r docker stop
    
    echo "All services have been stopped."
}

function restart() {
    echo "Restarting services..."
    stop
    sleep 5
    start
}

function logs() {
    echo "Fetching logs..."
    $COMPOSE_CMD logs --tail=0 --follow
}

function clean() {
    echo "Cleaning up Docker resources..."
    
    # Stop all containers first
    echo "Stopping all containers..."
    $COMPOSE_CMD down
    
    # Remove all stopped containers
    echo "Removing stopped containers..."
    docker container prune -f
    
    # Remove unused images
    echo "Removing unused images..."
    docker image prune -a -f
    
    # Remove unused volumes (including PostgreSQL data)
    echo "Removing unused volumes..."
    docker volume prune -f
    
    echo "Clean up complete."
}

function stats() {
    echo "Monitoring GPU resources..."
    
    # Check if nvitop is available for GPU monitoring
    if command -v pipx run nvitop &> /dev/null; then
        echo "GPU Statistics (refreshing every 2 seconds, press Ctrl+C to exit):"
        echo "-------------------"
        pipx run nvitop
    elif command -v nvidia-smi &> /dev/null; then
        echo "GPU Statistics (refreshing every 2 seconds, press Ctrl+C to exit):"
        echo "-------------------"
        watch -n 2 nvidia-smi
    else
        echo "GPU monitoring not available: nvitop or nvidia-smi commands not found"
        exit 1
    fi
}

function status() {
    echo "Checking services status..."
    
    # Check if containers are running
    echo "Container Status:"
    echo "----------------"
    if docker ps --format "{{.Names}}" | grep -q "$CONTAINER_NAME"; then
        echo "✅ Open WebUI container is running"
    else
        echo "❌ Open WebUI container is not running"
    fi
    
    if docker ps --format "{{.Names}}" | grep -q "ollama"; then
        echo "✅ Ollama container is running"
    else
        echo "❌ Ollama container is not running"
    fi

    if docker ps --format "{{.Names}}" | grep -q "postgres"; then
        echo "✅ PostgreSQL container is running"
    else
        echo "❌ PostgreSQL container is not running"
    fi

    if docker ps --format "{{.Names}}" | grep -q "pgadmin"; then
        echo "✅ pgAdmin container is running"
    else
        echo "❌ pgAdmin container is not running"
    fi

    if docker ps --format "{{.Names}}" | grep -q "watchtower"; then
        echo "✅ Watchtower container is running"
    else
        echo "❌ Watchtower container is not running"
    fi
    
    # Check if services are responding
    echo -e "\nService Health:"
    echo "----------------"
    
    # Check Ollama API
    if curl -s -o /dev/null -w "%{http_code}" http://localhost:11434/api/version 2>/dev/null | grep -q "200"; then
        echo "✅ Ollama API is responding"
    else
        echo "❌ Ollama API is not responding"
    fi
    
    # Check Open WebUI
    echo -n "Open WebUI status: "
    WEBUI_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/health 2>/dev/null)
    if [ "$WEBUI_STATUS" = "200" ]; then
        echo "✅ Open WebUI is responding (HTTP 200)"
    else
        echo "❌ Open WebUI is not responding (HTTP $WEBUI_STATUS)"
        echo "Checking container logs:"
        docker logs $CONTAINER_NAME --tail 5
    fi

    # Check PostgreSQL
    echo -n "PostgreSQL status: "
    if docker exec postgres pg_isready -U "${POSTGRES_USER:-admin}" >/dev/null 2>&1; then
        echo "✅ PostgreSQL is responding"
    else
        echo "❌ PostgreSQL is not responding"
        echo "Checking PostgreSQL logs:"
        docker logs postgres --tail 5
    fi

    # Check pgAdmin
    echo -n "pgAdmin status: "
    PGADMIN_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5050 2>/dev/null)
    if [ "$PGADMIN_STATUS" = "200" ] || [ "$PGADMIN_STATUS" = "302" ]; then
        echo -e "✅ pgAdmin is responding (HTTP $PGADMIN_STATUS)\n"
    else
        echo -e "❌ pgAdmin is not responding (HTTP $PGADMIN_STATUS)\n"
        echo "Checking pgAdmin logs:"
        docker logs pgadmin --tail 5
    fi
}

function add() {
    if [ -z "$1" ]; then
        echo "Error: Model name is required"
        echo "Usage: $0 add <model-name>"
        echo "Example: $0 add starcoder2:latest"
        return 1
    fi

    echo "Adding model: $1"
    
    # Check if Ollama is running
    if ! docker ps --format "{{.Names}}" | grep -q "ollama"; then
        echo "Error: Ollama container is not running. Please start the services first."
        return 1
    fi

    # Try to add the model
    if docker exec ollama ollama pull "$1"; then
        echo "✅ Successfully added model: $1"
    else
        echo "❌ Failed to add model: $1"
        echo "Debug: Check if the model name is correct and the Ollama container is running."
        return 1
    fi
}

function remove() {
    if [ -z "$1" ]; then
        echo "Error: Model name is required"
        echo "Usage: $0 remove <model-name>"
        echo "Example: $0 remove starcoder2:latest"
        return 1
    fi

    echo "Removing model: $1"
    
    # Check if Ollama is running
    if ! docker ps --format "{{.Names}}" | grep -q "ollama"; then
        echo "Error: Ollama container is not running. Please start the services first."
        return 1
    fi

    # Try to remove the model using the correct command
    if docker exec ollama ollama rm "$1"; then  # Using 'rm' command
        echo "✅ Successfully removed model: $1"
    else
        echo "❌ Failed to remove model: $1"
        echo "Debug: Check if the model name is correct and the Ollama container is running."
        return 1
    fi
}

function list() {
    echo "Listing installed models..."
    
    # Check if Ollama is running
    if ! docker ps --format "{{.Names}}" | grep -q "ollama"; then
        echo "Error: Ollama container is not running. Please start the services first."
        return 1
    fi

    # List installed models
    docker exec ollama ollama list
}

function help_menu() {
    echo "Usage: $0 {start|stop|restart|logs|clean|stats|status|add|remove|list}"
    echo "Commands:"
    echo "  start                Start the Docker Compose deployment"
    echo "  stop                 Stop the Docker Compose deployment"
    echo "  restart              Restart all services"
    echo "  logs                 Show logs for all containers"
    echo "  clean                Remove unused Docker containers, images, and volumes"
    echo "  stats                Show resource usage statistics"
    echo "  status               Check services status"
    echo "  add <model-name>     Add a specific Ollama model"
    echo "  remove <model-name>  Remove a specific Ollama model"
    echo "  list                 List all installed models"
    exit 1
}

function main() {
    if [[ $# -lt 1 ]]; then
        help_menu
    fi

    case "$1" in
        start)
            start
            ;;
        stop)
            stop
            ;;
        restart)
            restart
            ;;
        logs)
            logs
            ;;
        clean)
            clean
            ;;
        stats)
            stats
            ;;
        status)
            status
            ;;
        add)
            add "$2"
            ;;
        remove)
            remove "$2"
            ;;
        list)
            list
            ;;
        *)
            help_menu
            ;;
    esac
}

main "$@"